import Vector2D from '../utils/Vector2D'

{
  /**
   * 向量点乘、向量叉乘
   */

  const a = [1, 2, 3]
  const b = [4, 5, 6]

  /**
   * 1.向量点乘（结果为标量）
   * a · b = a1 * b1 + a2 * b2 + a3 * b3 = |a| * |b| * cos&
   * 在 N 维线性空间中，a、b 向量点积的几何含义，是 a 向量乘以 b 向量在 a 向量上的投影分量。物理含义相当于a力作用于物体，产生b位移所做的功
   */
  const point = a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
  // 1-1.当a、b向量平行时，夹角&为0
  // a1 * b1 + a2 * b2 等同于 a.length * b.length
  // 1-2.当a、b向量垂直时，夹角&为90
  // a1 * b1 + a2 * b2 等同于 0

  /**
   * 2.向量叉乘（结果为向量）
   *          i   j   k
   * a x b =  x1  y1  z1 = [(y1 * z2 - y2 * z1), -(x1 * z2 - x2 * z1), (x1 * y2 - x2 * y1)]
   *          x2  y2  z2
   * 叉乘的方向：两个向量的叉积与两个向量组成的坐标平面垂直，具体来说在左右手坐标系中，食指指向a、中指指向b、拇指方向就是叉乘的方向
   * 叉乘的意义：二维向量叉积的几何意义就是向量 a、b 组成的平行四边形的面积。物理意义是力产生的力矩
   * 二维的叉乘：二维空间z为0，因此a x b = x1 * y2 - x2 * y1
   */
  const fork = [
    a[1] * b[2] - b[1] * a[2],
    -(a[0] * b[2] - b[0] * a[2]),
    a[0] * b[1] - b[0] * a[1]
  ]

  /**
   * 3.向量归一化
   * 让向量v除以它的长度，归一化后向量的方向不变，长度为1。在向量乘法中，如果a、b都是长度为1的归一化向量，那么|a · b|就是a、b夹角的余弦值；|a x b|就是a、b夹角的正弦值
   */
  // 场景：判断点是否在扫描范围内（见图）
  // 思路；只要任意一点所在的向量与单位向量v的叉乘绝对值不大于0.5（sin30），就说明点在扫描范围内
  const v = new Vector2D(50, 100)
  const isInRange = Math.abs(new Vector2D(0, 1).cross(v.normalize())) <= 0.5

  console.log('向量点乘', point)
  console.log('向量叉乘', fork)
  console.log('点是否在扫描范围内', isInRange)
}
